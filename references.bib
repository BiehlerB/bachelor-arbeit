@book{Larman2003AgileIDMG,
	author=	{Larman, C.},
	title=	{Agile and Iterative Development: A Manager's Guide},
	year=	{2003},
	isbn=	{0131111558},
	publisher={Pearson Education},
	abstract={Agile/iterative methods: From business case to successful implementationThis is the definitive guide for managers and students to agile and iterative development methods: what they are, how they work, how to implement them-and why you should.Using statistically significant research and large-scale case studies, noted methods expert Craig Larman presents the most convincing case ever made for iterative development. Larman offers a concise, information-packed summary of the key ideas that drive all agile and iterative processes, with the details of four noteworthy iterative methods: Scrum, XP, RUP, and Evo. Coverage includes: Compelling evidence that iterative methods reduce project risk Frequently asked questions Agile and iterative values and practices Dozens of useful iterative and agile practice tips New management skills for agile/iterative project leaders Key practices of Scrum, XP, RUP, and EvoWhether you're an IT executive, project manager, student of software engineering, or developer, Craig Larman will help you understand the promise of agile/iterative development, sell it throughout your organizationaeand transform the promise into reality.}
}

@book{Arnowitz2010EffectivePSM,
	title=	{Effective Prototyping for Software Makers},
	author=	{Arnowitz, J. and Arent, M. and Berger, N.},
	year=	{2010},
	isbn=	{9780080468969},
	lccn=	{2006019373},
	series=	{Interactive Technologies},
	publisher={Elsevier Science},
	abstract={Much as we hate to admit it, most prototyping practice lacks a sophisticated understanding of the broad concepts of prototypingand its strategic position within the development process. Often we overwhelm with a high fidelity prototype that designs us into a corner. Or, we can underwhelm with a prototype with too much ambiguity and flexibility to be of much use in the software development process. This book will help software makersdevelopers, designers, and architectsbuild effective prototypes every time: prototypes that convey enough information about the product at the appropriate time and thus set expectations appropriately. This practical, informative book will help anyonewhether or not one has artistic talent, access to special tools, or programming abilityto use good prototyping style, methods, and tools to build prototypes and manage for effective prototyping. Features * A prototyping process with guidelines, templates, and worksheets; * Overviews and step-by-step guides for 9 common prototyping techniques; * An introduction with step-by-step guidelines to a variety of prototyping tools that do not require advanced artistic skills; * Templates and other resources used in the book available on the Web for reuse; * Clearly-explained concepts and guidelines; * Full-color illustrations, and examples from a wide variety of prototyping processes, methods, and tools. Jonathan Arnowitz is a principal user experience designer at SAP Labs and is the co-editor-in-chief of Interactions Magazine. Most recently Jonathan was a senior user experience designer at Peoplesoft. He is a member of the SIGCHI executive committee, and was a founder of DUX, the first ever joint conference of ACM SIGCHI, ACM SIGGRAPH, AIGA Experience Design Group, and STC. Michael Arent is the manager of user experience design at SAP Labs, and has previously held positions at Peoplesoft, Inc, Adobe Systems, Inc, Sun Microsystems, and Apple Computer, Inc. He holds several U.S. patents. Nevin Berger is design director at Ziff Davis Media. Previously he was a senior interaction designer at Oracle Corporation and Peoplesoft, Inc., and has held creative director positions at ZDNet, World Savings, and OFOTO, Inc. * A prototyping process with guidelines, templates, and worksheets; * Overviews and step-by-step guides for 9 common prototyping techniques; * An introduction with step-by-step guidelines to a variety of prototyping tools that do not require advanced artistic skills; * Templates and other resources used in the book available on the Web for reuse; * Clearly-explained concepts and guidelines; * Full-color illustrations, and examples from a wide variety of prototyping processes, methods, and tools. * www.mkp.com/prototyping.}
}

@book{Courage2005UnderstandingU,
	title=	{Understanding Your Users: A Practical Guide to User Requirements Methods, Tools, and Techniques},
	author=	{Courage, C. and Baxter, K.},
	isbn=	{9781558609358},
	lccn=	{2004028477},
	series=	{Interactive Technologies},
	year=	{2005},
	publisher={Elsevier Science},
	abstract={Today many companies are employing a user-centered design (UCD) process, but for most companies, usability begins and ends with the usability test. Although usability testing is a critical part of an effective user-centered life cycle, it is only one component of the UCD process. This book is focused on the requirements gathering stage, which often receives less attention than usability testing, but is equally as important. Understanding user requirements is critical to the development of a successful product. Understanding Your Users is an easy to read, easy to implement, how-to guide on usability in the real world. It focuses on the "user requirements gathering" stage of product development and it provides a variety of techniques, many of which may be new to usability professionals. For each technique, readers will learn how to prepare for and conduct the activity, as well as analyze and present the data all in a practical and hands-on way. In addition, each method presented provides different information about the user and their requirements (e.g., functional requirements, information architecture, task flows). The techniques can be used together to form a complete picture of the users requirements or they can be used separately to address specific product questions. These techniques have helped product teams understand the value of user requirements gathering by providing insight into how users work and what they need to be successful at their tasks. Case studies from industry-leading companies demonstrate each method in action. In addition, readers are provided with the foundation to conduct any usability activity (e.g., getting buy-in from management, legal and ethical considerations, setting up your facilities, recruiting, moderating activities) and to ensure the incorporation of the results into their products. Covers all of the significant requirements gathering methods in a readable, practical way Presents the foundation readers need to prepare for any requirements gathering activity and ensure that the results are incorporated into their products Includes invaluable worksheet and template appendices Includes a case study for each method from industry leaders Written by experienced authors who teach conference courses on this subject to usability professionals and new product designers alike.}
}

@book{Schnell2018MethodenES,
	title=	{Methoden der empirischen Sozialforschung},
	author=	{Schnell, R. and Hill, P. and Esser, E.},
	isbn=	{9783110577327},
	year=	{2018},
	publisher={De Gruyter Oldenbourg},
	abstract={Dieser Bestseller mit über 70.000 verkauften Exemplaren holt den Studierenden am Studienbeginn ab und führt ihn erfolgreich in die empirische Sozialforschung ein. Dabei schafft das Lehrbuch vielfältig den methodischen Brückenschlag von empirischer Sozialforschung und soziologischer Theorie. Es stellt Verfahren und Sachverhalte nicht nur vor, sondern erklärt sie verständlich. Die kritische Darstellung auch der neueren Entwicklungen der Methoden der empirischen Sozialforschung und ihrer Grundlagen weist über andere Lehrbücher hinaus. Auch daher ist dieses Lehrbuch das am häufigsten zitierte Lehrbuch zum Thema in deutscher Sprache.Für die 11. Auflage wurde der Band u.a. um Abschnitte über Big Data in den Sozialwissenschaften, zu adaptiven Designs bei Befragungen und zum Web-Scraping erweitert.}
}

@book{Jacobsen2019PraxisbuchUuU,
	title=	{Praxisbuch Usability und UX},
	author=	{Jacobsen, J. und Meyer, L.},
	isbn=	{9783836269551},
	year=	{2019},
	publisher={Rheinwerk Verlag},
	abstract={Praxislösungen für alle Usability-Fälle Nutzer kennenlernen und verstehen Projekte sinnvoll planen und umsetzen Mit umfangreichen Usability-Guidelines Von Praktikern für Praktiker: Dieses Buch enthält alles, was Sie für die Planung und Umsetzung nutzerfreundlicher Webseiten wissen sollten. Mit modernen Tools, neuen Mapping-Methoden und aktualisierten Guidelines zu Audio, Video und Dashboards ist es auf der Höhe der Zeit. Profitieren Sie so von jahrzehntelanger Erfahrung und lernen Sie, wie Sie Seiten navigierbar gestalten, Inhalte zugänglich präsentieren und User begeistern. Die Anleitung für alle, die neue Websites erstellen oder bestehende verbessern möchten. Auch geeignet als Nachschlagewerk! Aus dem Inhalt: User Centered Design Agiles Usability-Engineering Personas, Tests und Reviews Nutzerführung und Seitengestaltung Mockups und Wireframes Mobilgeräte und Nutzungskontexte Inhaltselemente sinnvoll einsetzen Nutzerfreundlich schreiben A/B-Tests und Analysen Die Fachpresse zur Vorauflage: iX - Magazin für professionelle Informationstechnik: "In drei Teilen tragen die Autoren alle wichtigen Aspekte zusammen, die eine Webseite benutzbar machen und nebenbei ein wenig Spaß bringen." t3n: "Das Buch eignet sich für den Einstieg und auch als Nachschlagewerk." SCREENGUIDE: "Enthält alles, was Sie für die Planung und Umsetzung nutzerfreundlicher Websites und Apps benötigen."}
}

% Braucht VPN
@book{Wolber2011AppInventor,
	title={App Inventor},
	author={Wolber, D. and Abelson, H. and Spertus, E. and Looney, L.},
	year={2011},
	publisher={"O'Reilly Media, Inc."}
}

@inproceedings{Schiffer1996VisuelleProgPG,
	title={Visuelle Programmierung - Potential und Grenzen},
	author={Stefan Schiffer},
	booktitle={GI Jahrestagung},
	year={1996},
	abstract={Visuelle Programmierung ist zu einem Begriff geworden, der fur intuitive Softwareentwicklung steht. Bei der visuellen Programmierung verzichtet man weitgehend auf textuelle Notationen und verwendet statt dessen graphische Programmbausteine. Mit dem Einsatz visueller Techniken ist unter anderem die Hoffnung verbunden, Programme einfacher und besser als bisher erstellen und verstehen zu konnen, womit auch Programmierlaien der Zugang zur Softwareentwicklung geoffnet wurde. Dies konnte zu einem Abbau des vielerorts enormen Anwendungsruckstaus fuhren. Den Vorteilen von visueller Programmierung wie anschaulicher Realitatsbezug, groses Motivationsund Lernpotential, Abschwachung syntaktischer Strukturen und Betonung semantischer Zusammenhange stehen Nachteile wie fehlende Standards, geringe Darstellungsdichte, hohe Resistenz gegenuber Modifikationen, schwierige Formalisierbarkeit und beschrankte Abstraktionsmoglichkeiten gegenuber. Der Artikel lotet Potential und Grenzen der visuellen Programmierung aus und versucht eine Orientierungshilfe bei der Einschatzung dieser neuen Programmiertechnik zu geben.}
}



@article{Cockburn2008UsingBI,
	title=	{Using Both Incremental and Iterative Development},
	author=	{Cockburn, A.},
	journal={CrossTalk The Journal of Defense Software Engineering},
	month=	{May},
	pages=	{27-30},
	year=	{2008},
	abstract={Incremental development is distinctly different from iterative development in its purpose and also from its management implications. Teams get into trouble by doing one and not the other, or by trying to manage them the same way. This article illustrates their differences and how to use them together.}
}

@book{Kurlander1993WatchPBD,
	title={Watch what I do: programming by demonstration},
	author={Kurlander, D. and Cypher, A. and Halbert, D.},
	year={1993},
	url={http://acypher.com/wwid/index.html}
}



@INPROCEEDINGS{Fraser2015TenThingsB,  
	author={Fraser, N.},  
	booktitle={2015 IEEE Blocks and Beyond Workshop (Blocks and Beyond)},   
	title={Ten things we've learned from Blockly},   
	year={2015},  
	pages={49-50},  
	abstract={Over the last four years the Blockly team has learned many lessons which are applicable to block-based programming in general. The following are a collection of ten mistakes we have made, or mistakes commonly made by others. Each issue is presented as noncontroversial folk knowledge without supporting data.},  
	doi={10.1109/BLOCKS.2015.7369000},  
	month={Oct}
}

% Industrielle Roboter, nicht soziale Roboter!
@INPROCEEDINGS{Winterer2020ExpertRABIRP,  
	author={Winterer, M. and Salomon, C. and Köberle, J. and Ramler, R. and Schittengruber, M.},  
	booktitle={2020 25th IEEE International Conference on Emerging Technologies and Factory Automation (ETFA)},   
	title={An Expert Review on the Applicability of Blockly for Industrial Robot Programming},   
	year={2020},
	month={Sep.},
	pages={1231-1234},  
	doi={10.1109/ETFA46521.2020.9212036},  
	ISSN={1946-0759},  
	abstract={The paradigm shift triggered by Industry 4.0 leads to a fast rising number of industrial machinery and collaborative robots that increases the need for flexible customization of production processes and automation workflows. End-user programming of industrial robots has become an essential capability for all areas in industry. In this paper, we investigate the applicability of block-based programming languages for large and complex robot programs. Therefore, we implemented a real-world program for industrial robots using Blockly, a block-based visual language, and assessed the results regarding portability, readability, understandability, and maintainability. Our findings are, that (1) large and complex real-world robot programs can be expressed in Blockly, (2) that the readability and understandability of such programs is equal to conventional flow-chart based programming languages, and (3) that the maintainability of Blockly programs can even be considered better than in flowchart based languages. Our results and findings serve as basis for usability studies with end-users in robot programming.}
}

@inproceedings{Scaffidi2005EstimatingNEUP,
	author=	{Scaffidi, C. und Shaw, M. and Myers, B.},
	booktitle={2005 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC'05)},
	title=	{Estimating the numbers of end users and end user programmers},
	year=	{2005},
	pages=	{207--214},
	organization={IEEE},
	abstract={In 1995, Boehm predicted that by 2005, there would be “55 million performers” of “end user programming” in the United States. The original context and method which generated this number had two weaknesses, both of which we address. First, it relies on undocumented, judgment based factors to estimate the number of end user programmers based on the total number of end users; we address this weakness by identifying specific end user sub populations and then estimating their sizes. Second, Boehm's estimate relies on additional undocumented, judgment based factors to adjust for rising computer usage rates; we address this weakness by integrating fresh Bureau of Labor Statistics (BLS) data and projections as well as a richer estimation method. With these improvements to Boehm’s method, we estimate that in 2012 there will be 90 million end users in American workplaces. Of these, we anticipate that over 55 million will use spreadsheets or databases (and therefore may potentially program), while over 13 million will describe themselves as programmers, compared to BLS projections of fewer than 3 million professional programmers. We have validated our improved method by generating estimates for 2001 and 2003, then verifying that our estimates are consistent with existing estimates from other sources.}
}

% Nochmal genau lesen
@inproceedings{Lindgren2010ModelPKSHD,
	title={A model for interaction design of personalised knowledge systems in the health domain},
	author={Lindgren, H. and Winnberg, P.},
	booktitle={International Conference on Electronic Healthcare},
	pages={235--242},
	year={2010},
	organization={Springer}
}

@inproceedings{Manshade2013IntegratingPBENLP,
	author = {Manshadi, M. and Gildea, D. and Allen, J.},
	title = {Integrating Programming by Example and Natural Language Programming},
	year = {2013},
	publisher = {AAAI Press},
	abstract = {We motivate the integration of programming by example and natural language programming
	by developing a system for specifying programs for simple text editing operations
	based on regular expressions. The programs are described with unconstrained natural
	language instructions, and providing one or more examples of input/output. We show
	that natural language allows the system to deduce the correct program much more often
	and much faster than is possible with the input/output example(s) alone, showing that
	natural language programming and programming by example can be combined in a way that
	overcomes the ambiguities that both methods suffer from individually and, at the same
	time, provides a more natural interface to the user.},
	booktitle = {Proceedings of the Twenty-Seventh AAAI Conference on Artificial Intelligence},
	pages = {661–667},
	numpages = {7},
	location = {Bellevue, Washington},
	series = {AAAI'13}
}

@InProceedings{Singh2015PredictionPBE,
	author="Singh, R. und Gulwani, S.",
	editor="Kroening, D. und P{\u{a}}s{\u{a}}reanu, C.",
	title="Predicting a Correct Program in Programming by Example",
	booktitle="Computer Aided Verification",
	year="2015",
	publisher="Springer International Publishing",
	address="Cham",
	pages="398--414",
	abstract="We study the problem of efficiently predicting a correct program from a large set of programs induced from few input-output examples in Programming-by-Example (PBE) systems.",
	isbn="978-3-319-21690-4"
}



@incollection{Lieberman2006EUDaEP,
	author=	{Lieberman, H. and Patern{\`o}, F. and Klann, M. and Wulf, V.},
	booktitle={End user development},
	title=	{End-user development: An emerging paradigm},
	year=	{2006},
	pages=	{1-8},
	publisher={Springer},
	abstract={We think that over the next few years, the goal of interactive systems and services will evolve from just making systems easy to use (even though that goal has not yet been completely achieved) to making systems that are easy to develop by end users. By now, most people have become familiar with the basic functionality and interfaces of computers, but they are not able to manage any programming language. Therefore, they cannot develop new applications or modify current ones according to their needs. In order to address such challenges it is necessary a new paradigm, based on a multidisciplinary approach involving several types of expertise, such as software engineering, human-computer interaction, CSCW, which are now rather fragmented and with little interaction. The resulting methods and tools can provide results useful across many application domains, such as ERP, multi-device services (accessible through both mobile and stationary devices), and professional applications.}
}



@inbook{Weintrop2018CoBloxRoboticsProg,
	author = {Weintrop, D. and Afzal, A. and Salac, J. and Francis, P. and Li, B. and Shepherd, D. and Franklin, D.},
	title = {Evaluating CoBlox: A Comparative Study of Robotics Programming Environments for Adult Novices},
	year = {2018},
	isbn = {9781450356206},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3173574.3173940},
	abstract = {A new wave of collaborative robots designed to work alongside humans is bringing the automation historically seen in large-scale industrial settings to new, diverse contexts. However, the ability to program these machines often requires years of training, making	them inaccessible or impractical for many. This paper rethinks what robot programming interfaces could be in order to make them accessible and intuitive for adult novice programmers. We created a block-based interface for programming a one-armed industrial robot and conducted a study with 67 adult novices comparing it to two programming approaches in widespread use in industry. The results show participants using the block-based interface successfully implemented robot programs faster with no loss in accuracy while reporting higher scores for usability, learnability, and overall satisfaction. The contribution of this work is showing the potential for using block-based programming to make powerful technologies accessible to a wider audience.},
	booktitle = {Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems},
	pages = {1–12},
	numpages = {12}
}



@article{Harrison2004DangersEUP,  
	author={Harrison, W.},  
	journal={IEEE Software},   
	title={From the Editor: The Dangers of End-User Programming},
	year={2004},  
	volume={21},  
	number={4},  
	pages={5-7},  
	abstract={We cannot expect secure computing from the vast majority of software applications when they’re written with little, if any, knowledge of generally accepted good practices such as specifying before coding, systematic testing, and so on. Although using professional programmers doesn’t guarantee correctness, security, or maintainability, the lack of real understanding about software development by end-user programmers poses a danger to stakeholders associated with mission-critical systems from the standpoints of both correctness and security.},  
	doi={10.1109/MS.2004.13},  
	ISSN={1937-4194},  
	month={July},
}

@article{Nadkarni2011NLPIntroduction,
	author = {Nadkarni, P. and Ohno-Machado, L. and Chapman, W.},
	journal = {Journal of the American Medical Informatics Association},
	title = {Natural language processing: an introduction},
	year = {2011},
	month = {09},
	volume = {18},
	number = {5},
	pages = {544-551},
	abstract = "{Objectives To provide an overview and tutorial of natural language processing (NLP) and modern NLP-system design.Target audience This tutorial targets the medical informatics generalist who has limited acquaintance with the principles behind NLP and/or limited knowledge of the current state of the art.Scope We describe the historical evolution of NLP, and summarize common NLP sub-problems in this extensive field. We then provide a synopsis of selected highlights of medical NLP efforts. After providing a brief description of common machine-learning approaches that are being used for diverse NLP sub-problems, we discuss how modern NLP architectures are designed, with a summary of the Apache Foundation's Unstructured Information Management Architecture. We finally consider possible future directions for NLP, and reflect on the possible impact of IBM Watson on the medical field.}",
	doi = {10.1136/amiajnl-2011-000464},
	issn = {1067-5027},
}

@article{Liddy2001NLP,
	title={Natural language processing},
	author={Liddy, Elizabeth D},
	year={2001},
	abstract={Natural Language Processing (NLP) is the computerized approach to analyzing text that is based on both a set of theories and a set of technologies. And, being a very active area of research and development, there is not a single agreed-upon definition that would satisfy everyone, but there are some aspects, which would be part of any knowledgeable person’s definition.}
}

@article{SaezLopez2016VPLElementarySchool,
	title = {Visual programming languages integrated across the curriculum in elementary school: A two year case study using “Scratch” in five schools},
	journal = {Computers \& Education},
	volume = {97},
	pages = {129-141},
	year = {2016},
	issn = {0360-1315},
	doi = {https://doi.org/10.1016/j.compedu.2016.03.003},
	url = {https://www.sciencedirect.com/science/article/pii/S0360131516300549},
	author = {Sáez-López, J. and Román-González, M. and Vázquez-Cano, E.},
	keywords = {Computational thinking, Elementary education, Improving classroom teaching, Programming and programming languages, Teaching/learning strategies},
	abstract = {Several authors and studies highlight the benefits of the integration of Computer Science into K-12 education. Applications such as Scratch have been demonstrated to be effective in educational environments. The aim of this study is to assess the use of a Visual Programming Language using Scratch in classroom practice, analyzing the outcomes and attitudes of 107 primary school students from 5th to 6th grade in five different schools in Spain. The intervention takes place in two academic years analyzing the practice of integrating coding and visual blocks programming in sciences and arts. The “Computational concepts and computational practices” dimension details a quasi-experimental approach, which showed significant improvement regarding learning programming concepts, logic, and computational practices with an active approach. The “Learning processes and coding in primary education” dimension analyzes the practice of the experimental group through questionnaires and structured observation. In this pedagogical design, students interact and create their own content related to curricular areas with several advantages, such as motivation, fun, commitment, and enthusiasm, showing improvements related to computational thinking and computational practices. Understanding of computational concepts through an active approach, Project Based Learning, usefulness, motivation, and commitment underline the importance and effectiveness of implementing a Visual Programming Language from active methodologies in primary education. Due to the aforementioned benefits and positive results obtained in this research, it is recommended to implement a Visual Programming Language in educational settings in 5th and 6th grade in primary education through a cross-curricular implementation.}
}

@article{Willits2016AnotherLookLikert,
	title={Another look at Likert scales},
	author={Willits, F. and Theodori, G. and Luloff, A.},
	journal={Journal of Rural Social Sciences},
	volume={31},
	number={3},
	pages={6},
	year={2016},
	abstract={Perhaps the most widely used means for assessing survey respondents’ personal attitudes consists of a series  of  stem-statements  followed  by  an  odd  or  even  number  of  ordered,  bipolar-named  categories.  Such statements, known as Likert items, are named for Rensis Likert whose classic studies of attitude measurement were first published in 1932. Almost from the beginning, methodologists and psychometric scholars have raised questions concerning the number of items deemed necessary to form an attitude scale, the number and meaning of various answer categories, and the appropriate statistical methods to use in analyzing the resulting data. These deliberations are summarized. We conclude that, while continuing research on the meaning and uses of Likert scales is needed, many criticisms directed against their usage are unwarranted. Both Likert items and multi-item scales represent useful means for researchers seeking information on subjects’ attitudes.}
}



@techreport{Rode2005EUDWebDev,
	title=	{An end-user development perspective on state-of-the-art web development tools},
	author=	{Rode, J. and Howarth, J. and P{\'e}rez-Qui{\~n}ones, M. and Rosson, M.},
	year=	{2005},
	institution={Department of Computer Science, Virginia Polytechnic Institute \& State~…},
	abstract={We reviewed and analyzed nine commercially available web development tools from the perspective of suitability for end-user development to compare and contrast alternative and best-of-breed approaches for particular problem areas within web application development (Getting Started, Workflow, Level of Abstraction, Layout, Database, Application Logic, Testing and Debugging, Learning and Scaling, Security, Collaboration, and Deployment). End-user development involves the creation of dynamic websites with support for features like authentication, conditional display, and searching/sorting by casual web developers who have some experience creating static websites but little or no programming knowledge. We found that current tools do not lack functionality, but rather have a variety of problems in ease of use for end users who are nonprogrammers. In particular, while many tools offer wizards and other features designed to facilitate specific aspects of end-user development, none of the tools that we reviewed supports a holistic approach to web application development. We discuss the implications of these problems and conclude with recommendations for the design of improved web development tools that would lower the entry barrier into web programming.}
}



